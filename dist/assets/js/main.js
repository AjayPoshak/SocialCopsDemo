/**
 * This file deals with reading the csv file and converting the csv data
 * into JSON.
 */
"use strict";
/**
 * Listener to load event in XMLHttpRequest
 */

function xmlListener() {
  var csvData = xmlReq.responseText;
  var res = csvJSON(csvData);
  //console.log(res);
  localStorage.setItem('data', res);
}
/**
 * Listner to error event in XMLHttpRequest
 */
function transferError() {
  console.error("An error occurred while transferring the file.");
}
/**
 * Listener to prgress event in XMLHttpRequest
 */
function transferProgress() {
  console.log("Progressing.....");
}
var xmlReq = new XMLHttpRequest();
xmlReq.addEventListener("load", xmlListener);
xmlReq.addEventListener("error", transferError);
xmlReq.addEventListener("progress", transferProgress);
xmlReq.open("GET", "http://localhost/SocialCopsDemo/sachin.csv");
xmlReq.send();

/**
 * @param  {object} csv data generated by parsing the file.
 * @return {object} JSON object is returned after processing.
 */
function csvJSON(csv) {
  var lines = csv.split("\n");
  var result = [];
  var headers = lines[0].split(",");
  for (var i = 1; i < lines.length; i++) {
    var obj = {};
    var currentline = lines[i].split(",");
    for (var j = 0; j < headers.length; j++) {
      obj[headers[j]] = currentline[j];
    }
    result.push(obj);
  }
  return JSON.stringify(result); //JSON
}
"use strict";

angular.module('socialCopsDemo', ['ngRoute']);
/**
 * This is the routing service for the application.
 * @param $routeProvider It is used to configure routes.
 */
angular.module('socialCopsDemo').config(['$routeProvider', function ($routeProvider) {
  console.log("Inside the router...");
  $routeProvider.when('/', {
    templateUrl: 'view/debut.html',
    controller: ''
  }).when('/playedBigTeams', {
    templateUrl: 'view/playedBigTeams.html',
    controller: 'playedBigTeamsController'
  }).when('/battingStats', {
    templateUrl: 'view/battingStats.html',
    controller: 'battingStatsController'
  }).when('/teamPerformance', {
    templateUrl: 'view/teamPerformance.html',
    controller: 'teamPerformanceController'
  }).when('/masterBlaster', {
    templateUrl: 'view/masterBlaster.html',
    controller: ''
  }).otherwise({
    redirectTo: '/'
  });
}]);
"use strict";
/**
 * This file is the controller of battingStats page.
 */

angular.module('socialCopsDemo').controller('battingStatsController', battingStatsController);

//Injecting the dependencies explicitly to avoid post minification errors
battingStatsController.$inject = ['$scope', '$rootScope'];

function battingStatsController($scope, $rootScope) {
    var data = {};
    if (localStorage.getItem('data') !== undefined || localStorage.getItem('data') !== '') {
        data = JSON.parse(localStorage.getItem("data"));
    }
    console.log("This is a demo");
    var runsByYear = [];
    var runsTossLost = 0;
    var runsTossWon = 0;
    for (var i = 0; i < data.length - 1; i++) {
        var responseIndex = checkYear(data[i].date.slice(-4));
        if (responseIndex == -1) {
            var obj = {};
            obj.year = parseInt(data[i].date.slice(-4));
            obj.runs = parseInt(data[i].batting_score);
            runsByYear.push(obj);
        } else {
            if (!$rootScope.ifNaN(data[i].batting_score)) runsByYear[responseIndex].runs += parseInt(data[i].batting_score);
        }
        if (!$rootScope.ifNaN(data[i].batting_score) && data[i].toss == "lost") runsTossLost += parseInt(data[i].batting_score);else if (!$rootScope.ifNaN(data[i].batting_score) && data[i].toss == "won") runsTossWon += parseInt(data[i].batting_score);
    }
    /**
     * This function checks whether that year has already been inserted into
     * runsByYear array.
     * @param  {string} param Year to be checked.
     * @return {Number}       -1, if year is not in array; location, if year is
     *                              already in array.
     */
    function checkYear(param) {
        var loc = -1;
        for (var itr = 0; itr < runsByYear.length; itr++) {
            if (runsByYear[itr].year == param) {
                loc = itr;
                break;
            }
        }
        return loc;
    }
    var runsData = [],
        runsYear = [];
    for (var _i = 0; _i < runsByYear.length; _i++) {
        runsData.push(runsByYear[_i].runs);
        runsYear.push(runsByYear[_i].year);
    }
    var runByYearGraph = document.getElementById('runGraphByYear');
    var runsByToss = document.getElementById('runsByToss').getContext("2d");
    var lineChartData = {
        labels: runsYear,
        datasets: [{
            label: "My First dataset",
            fill: false,
            lineTension: 0.1,
            backgroundColor: "rgba(75,192,192,0.4)",
            borderColor: "rgba(75,192,192,1)",
            borderCapStyle: 'butt',
            borderDash: [],
            borderDashOffset: 0.0,
            borderJoinStyle: 'miter',
            pointBorderColor: "rgba(75,192,192,1)",
            pointBackgroundColor: "#fff",
            pointBorderWidth: 1,
            pointHoverRadius: 5,
            pointHoverBackgroundColor: "rgba(75,192,192,1)",
            pointHoverBorderColor: "rgba(220,220,220,1)",
            pointHoverBorderWidth: 2,
            pointRadius: 1,
            pointHitRadius: 10,
            data: runsData,
            spanGaps: false
        }]
    };
    var runsByTossChartData = {
        labels: ["Runs Scored while toss was lost", "Runs Scored while toss was won"],
        datasets: [{
            data: [runsTossLost, runsTossWon],
            backgroundColor: ["#FF6384", "#36A2EB"],
            hoverBackgroundColor: ["#FF6384", "#36A2EB"]
        }]
    };
    var runLineChart = new Chart(runByYearGraph, {
        type: 'line',
        data: lineChartData
    });
    var runsByTossPieChart = new Chart(runsByToss, {
        type: 'pie',
        data: runsByTossChartData
    });
}
"use strict";
/**
 *  This is the global controller for whole application.
 */

angular.module('socialCopsDemo').controller('globalController', globalController);
/**
 * globalController controls the global functions and variables in the app.
 * @param  $rootScope Parent scope, all other scopes are descendants of rootScope
 * @param  $location  Exposes the current url in address bar, and also
 *                    synchronises the changes done to url.
 */
//Injecting the dependencies explicitly to avoid post minification errors
globalController.$inject = ['$rootScope', '$location'];

function globalController($rootScope, $location) {
  /**
   * This function checks if a number is NaN or not.
   *  NaN is a special type in JS which is not equal to itself.
   * @param  {string} param String to be checked for NaN
   * @return {Boolean}  true, if NaN; false, if not NaN
   */
  $rootScope.ifNaN = function (param) {
    if (parseInt(param) === parseInt(param)) {
      return false;
    } else {
      return true;
    }
  };
  /**
   * Previous page button's functionality.  It updates the URL of application
   * on the click of previous button by using $location service.
   * @param  {string} param Name of current partial in the view.
   */
  $rootScope.previousPage = function (param) {
    if (param === 'playedBigTeams') $location.path('/debut');else if (param === 'battingStats') $location.path('/playedBigTeams');else if (param === 'teamPerformance') $location.path('/battingStats');else if (param === 'masterBlaster') $location.path('/teamPerformance');else console.log("Invalid Path Request...");
  };
  /**
   * Next page button's functionality.  It updates the URL of application
   * when the next button is clicked.
   * @param  {string} param Name of current partial in the view.
   */
  $rootScope.nextPage = function (param) {
    if (param === 'debut') $location.path('/playedBigTeams');else if (param === 'playedBigTeams') $location.path('/battingStats');else if (param === 'battingStats') $location.path('/teamPerformance');else if (param === 'teamPerformance') $location.path('/masterBlaster');else console.log("Invalid Path Request");
  };
}
"use strict";

angular.module('socialCopsDemo').controller('playedBigTeamsController', playedBigTeamsController);

//Injecting the dependencies explicitly to avoid post minification errors
playedBigTeamsController.$inject = ['$scope', '$rootScope'];

/**
 * This controller controls the view for playedBigTeams partial.
 * @param   $scope  It acts like a glue between view and controller.
 * @param  $rootScope It is parent scope for all scopes.  Used to access global
 *                     variables and functions.
 */

function playedBigTeamsController($scope, $rootScope) {
    console.log("Inside third Controller...");
    var data = {};
    if (localStorage.getItem('data') !== undefined || localStorage.getItem('data') !== '') {
        data = JSON.parse(localStorage.getItem("data"));
    }
    var cricketNations = ["Pakistan", "New Zealand", "Sri Lanka", "England", "Bangladesh", "West Indies", "South Africa", "Australia"];
    var runsAgainstNations = new Array(cricketNations.length);
    var wicketsAgainstNations = new Array(cricketNations.length);
    for (var i = 0; i < data.length - 1; i++) {
        var nationIndex = checkNationIndex(data[i].opposition.substr(2));
        if (nationIndex !== -1) {
            if (runsAgainstNations[nationIndex] === undefined && !$rootScope.ifNaN(data[i].batting_score)) runsAgainstNations[nationIndex] = parseInt(data[i].batting_score);else if (runsAgainstNations[nationIndex] !== undefined && !$rootScope.ifNaN(data[i].batting_score)) runsAgainstNations[nationIndex] += parseInt(data[i].batting_score);
            if (wicketsAgainstNations[nationIndex] === undefined && !$rootScope.ifNaN(data[i].wickets)) wicketsAgainstNations[nationIndex] = parseInt(data[i].wickets);else if (wicketsAgainstNations[nationIndex] !== undefined && !$rootScope.ifNaN(data[i].wickets)) wicketsAgainstNations[nationIndex] += parseInt(data[i].wickets);
        }
    }
    /**
     * This function returns the index of a nation from cricketNations array.
     * @param  {string} nation Nation whose index is to be searched.
     * @return {number} Index, if nation is found in array; else -1.
     */
    function checkNationIndex(nation) {
        var loc = -1;
        for (var _i = 0; _i < cricketNations.length; _i++) {
            if (cricketNations[_i] == nation) {
                loc = _i;
                break;
            }
        }
        return loc;
    }
    var runsAgainstTeams = document.getElementById('runsAgainstTeams');
    var wicketsAgainstTeams = document.getElementById('wicketsAgainstTeams');
    var teamsBarChartData = {
        labels: cricketNations,
        datasets: [{
            label: 'Runs scored by Sachin against Test playing Nations',
            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)', 'rgba(255, 99, 160, 0.2)', 'rgba(255, 206, 186, 0.2)'],
            borderWidth: 1,
            data: runsAgainstNations
        }]
    };
    var wicketsTakenData = {
        labels: cricketNations,
        datasets: [{
            label: 'Wickets taken by Sachin against Test playing Nations',
            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)', 'rgba(255, 99, 160, 0.2)', 'rgba(255, 206, 186, 0.2)'],
            borderWidth: 1,
            data: wicketsAgainstNations
        }]
    };
    var runsBarChart = new Chart(runsAgainstTeams, {
        type: 'bar',
        data: teamsBarChartData
    });
    var wicketsBarChart = new Chart(wicketsAgainstTeams, {
        type: 'bar',
        data: wicketsTakenData
    });
}
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

angular.module('socialCopsDemo').controller('teamPerformanceController', teamPerformanceController);

//Injecting the dependencies explicitly to avoid post minification errors
teamPerformanceController.$inject = ['$scope', '$rootScope'];

/**
 * This controllers controls the view for teamPerformanceController.
 * @param   $scope  It acts like a glue between view and controller.
 * @param  $rootScope It is parent scope for all scopes.  Used to access global
 *                     variables and functions.
 */
function teamPerformanceController($scope, $rootScope) {
    var data = {};
    var underFifty = 0;
    var fifty = 0;
    var hundred = 0;
    var wonFifty = 0;
    var wonHundred = 0;
    var wonUnderFifty = 0;
    var twoHundred = 0;
    var wonTwoHundred = 0;
    var matchesSachinBowled = 0;
    var bowledWonMatches = 0;
    var oneWick = 0;
    var twoWicks = 0;
    var threeWicks = 0;
    var moreThanThreeWicks = 0;
    var oneWickWon = 0;
    var twoWicksWon = 0;
    var threeWicksWon = 0;
    var moreThanThreeWicksWon = 0;
    if (localStorage.getItem('data') !== undefined || localStorage.getItem('data') === '') {
        data = JSON.parse(localStorage.getItem("data"));
    }
    for (var i in data) {
        if (!$rootScope.ifNaN(data[i].batting_score) && parseInt(data[i].batting_score) < 50) {
            underFifty++;
            if (data[i].match_result === "won") wonUnderFifty++;
        } else if (!$rootScope.ifNaN(data[i].batting_score) && parseInt(data[i].batting_score) >= 50 && parseInt(data[i].batting_score) <= 99) {
            fifty++;
            if (data[i].match_result === "won") wonFifty++;
        } else if (!$rootScope.ifNaN(data[i].batting_score) && parseInt(data[i].batting_score) > 100 && parseInt(data[i].batting_score) < 200) {
            hundred++;
            if (data[i].match_result === "won") wonHundred++;
        } else if (!$rootScope.ifNaN(data[i].batting_score) && parseInt(data[i].batting_score) >= 200) {
            twoHundred++;
            if (data[i].match_result === "won") wonTwoHundred++;
        }
        if (!$rootScope.ifNaN(data[i].wickets) && parseInt(data[i].wickets) === 1) {
            oneWick++;
            if (data[i].match_result === "won") oneWickWon++;
        }
        if (!$rootScope.ifNaN(data[i].wickets) && parseInt(data[i].wickets) === 2) {
            twoWicks++;
            if (data[i].match_result === "won") twoWicksWon++;
        }
        if (!$rootScope.ifNaN(data[i].wickets) && parseInt(data[i].wickets) === 3) {
            threeWicks++;
            if (data[i].match_result === "won") threeWicksWon++;
        }
        if (!$rootScope.ifNaN(data[i].wickets) && parseInt(data[i].wickets) > 3) {
            moreThanThreeWicks++;
            if (data[i].match_result === "won") moreThanThreeWicksWon++;
        }
    }
    console.log(_typeof(data[19].wickets));
    var winningPercent = document.getElementById("winningPercent");
    var winningPercentWicks = document.getElementById("winningPercentWicks");
    var graphBatData = {
        labels: ["Run < 50", "Fifty", "Hundred", "Two Hundred"],
        datasets: [{
            label: 'Team Winning Percent when Sachin make runs',
            data: [wonUnderFifty / underFifty * 100, wonFifty / fifty * 100, wonHundred / hundred * 100, wonTwoHundred / twoHundred * 100],
            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],
            borderColor: ['rgba(255,99,132,1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],
            borderWidth: 1
        }]
    };
    console.log("one wicks " + oneWick + " Two Wicks:: " + twoWicksWon / twoWicks * 100);
    console.log("three wicks " + threeWicksWon / threeWicks * 100 + "MOre than three " + moreThanThreeWicksWon / moreThanThreeWicks * 100);
    var graphWicksData = {
        labels: ["1 wicket", "Two Wickets", "Three Wickets", "More than 3 Wickets"],
        datasets: [{
            label: 'Team Winning Percent when Sachin bowls',
            data: [oneWickWon / oneWick * 100, twoWicksWon / twoWicks * 100, threeWicksWon / threeWicks * 100, moreThanThreeWicksWon / moreThanThreeWicks * 100],
            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],
            borderColor: ['rgba(255,99,132,1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],
            borderWidth: 1
        }]
    };
    var myBarChart = new Chart(winningPercent, {
        type: 'horizontalBar',
        data: graphBatData
    });
    var myBarChartWicks = new Chart(winningPercentWicks, {
        type: 'horizontalBar',
        data: graphWicksData
    });
}